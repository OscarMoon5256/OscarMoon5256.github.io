{"version":3,"sources":["webpack:///./src/components/category-side/item/index.jsx","webpack:///./src/components/category-side/index.jsx","webpack:///./src/pages/index.js","webpack:///./src/components/scroll-indicator/scroll-indicator-mini/index.jsx","webpack:///./src/components/bio/index.jsx"],"names":["Item","title","selectedCategory","onClick","handleClick","useCallback","className","aria-selected","CategorySide","categories","category","selectCategory","map","idx","key","data","location","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","useMemo","node","frontmatter","useRenderedCount","count","countRef","increaseCount","useCategory","useIntersectionObserver","useScrollEvent","currentPos","window","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","dismissCondition","triggerCondition","length","current","BLOG_TITLE","keywords","isOnPage","style","marginLeft","marginRight","maxWidth","rhythm","paddingTop","padding","ScrollIndicatorMini","onScroll","scrollPercentage","textContent","Bio","forwardRef","props","ref","query","bioQuery","render","author","social","introduction","fixed","avatar","childImageSharp","alt","borderRadius","to","instagram","href","github","medium","twitter","facebook","linkedin"],"mappings":"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","file":"component---src-pages-index-js-c1b92cdb98cfff6ef9ce.js","sourcesContent":["import React, { useCallback } from 'react'\n\nexport const Item = ({ title, selectedCategory, onClick }) => {\n  const handleClick = useCallback(() => {\n    onClick(title)\n  }, [])\n\n  return (\n    <li className=\"item-side\">\n      <span\n        onClick={handleClick}\n        aria-selected={selectedCategory === title ? 'true' : 'false'}\n      >\n        {title}\n      </span>\n    </li>\n  )\n}\n","import React from 'react'\nimport { Item } from './item'\n\nimport './index.scss'\n\nexport const CategorySide = ({ categories, category, selectCategory }) => {\n  return (\n    <div className=\"category-side-wrapper\">\n      <div className=\"category-side-container\">\n        <div className=\"category-side\">\n          <h3>Categories</h3>\n          <ul className=\"category-side-list\">\n            <Item\n              title={'All'}\n              selectedCategory={category}\n              onClick={selectCategory}\n            />\n            {categories.map((title, idx) => (\n              <Item\n                key={idx}\n                title={title}\n                selectedCategory={category}\n                onClick={selectCategory}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { graphql } from 'gatsby'\nimport _ from 'lodash'\nimport React, { useMemo } from 'react'\nimport { Bio } from '../components/bio'\nimport { SEO } from '../components/seo'\nimport { Category } from '../components/category'\nimport { CategorySide } from '../components/category-side'\nimport { Contents } from '../components/contents'\nimport { ScrollIndicatorMini } from '../components/scroll-indicator/scroll-indicator-mini'\nimport { BLOG_TITLE } from '../constants/meta'\nimport { useCategory } from '../hooks/useCategory'\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver'\nimport { useRenderedCount } from '../hooks/useRenderedCount'\nimport { useScrollEvent } from '../hooks/useScrollEvent'\nimport { Layout } from '../layout'\nimport { rhythm } from '../utils/typography'\nimport * as Dom from '../utils/dom'\nimport * as EventManager from '../utils/event-manager'\n\nconst BASE_LINE = 80\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos\n}\n\nexport default ({ data, location }) => {\n  const { siteMetadata } = data.site\n  const { countOfInitialPost } = siteMetadata.configs\n  const posts = data.allMarkdownRemark.edges\n  const categories = useMemo(\n    () => _.uniq(posts.map(({ node }) => node.frontmatter.category)),\n    []\n  )\n\n  const [count, countRef, increaseCount] = useRenderedCount()\n  const [category, selectCategory] = useCategory()\n\n  useIntersectionObserver()\n\n  useScrollEvent(() => {\n    const currentPos = window.scrollY + window.innerHeight\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE\n    const doesNeedMore = () =>\n      posts.length > countRef.current * countOfInitialPost\n\n    return EventManager.toFit(increaseCount, {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })()\n  })\n\n  return (\n    <Layout location={location} title={siteMetadata.title}>\n      <SEO title={BLOG_TITLE} keywords={siteMetadata.keywords} />\n      <ScrollIndicatorMini isOnPage />\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          paddingTop: rhythm(0),\n        }}\n      >\n        <Bio />\n      </div>\n      <CategorySide\n        categories={categories}\n        category={category}\n        selectCategory={selectCategory}\n      />\n      <Category\n        categories={categories}\n        category={category}\n        selectCategory={selectCategory}\n      />\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)} ${rhythm(1)} ${rhythm(\n            3 / 4\n          )}`,\n        }}\n      >\n        <Contents\n          posts={posts}\n          countOfInitialPost={countOfInitialPost}\n          count={count}\n          category={category}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { ne: null }, draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            category\n            draft\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useScrollEvent } from '../../../hooks/useScrollEvent'\nimport * as EventManager from '../../../utils/event-manager'\nimport * as Dom from '../../../utils/dom'\n\nimport './index.scss'\n\nexport const ScrollIndicatorMini = ({ isOnPage }) => {\n  const onScroll = () => {\n    const scrollPercentage = Dom.getScrollPercent()\n\n    const displayElement = Dom.getElement('.scroll-indicator-mini')\n    displayElement.textContent = `${scrollPercentage}%`\n  }\n\n  useScrollEvent(() => {\n    return EventManager.toFit(onScroll, {})()\n  })\n\n  return isOnPage ? (\n    <div className=\"scroll-indicator-mini on-page\">0%</div>\n  ) : (\n    <div className=\"scroll-indicator-mini on-content\">0%</div>\n  )\n}\n","import React, { forwardRef } from 'react'\nimport { StaticQuery, graphql, Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport './index.scss'\n\nexport const Bio = forwardRef((props, ref) => {\n  return <StaticQuery\n    query={bioQuery}\n    render={data => {\n      const { author, social, introduction } = data.site.siteMetadata\n\n      return (\n        <div ref={ref} className=\"bio\">\n          <div className=\"author\">\n            <div className=\"author-description\">\n              <Image\n                className=\"author-image\"\n                fixed={data.avatar.childImageSharp.fixed}\n                alt={author}\n                style={{\n                  borderRadius: `100%`,\n                }}\n              />\n              <div className=\"author-name\">\n                <span className=\"author-name-prefix\">Written by</span>\n                <Link to={'/about'} className=\"author-name-content\">\n                  <span>@{author}</span>\n                </Link>\n                <div className=\"author-introduction\">{introduction}</div>\n                <p className=\"author-socials\">\n                  {social.instagram && (\n                    <a href={`https://www.instagram.com/${social.instagram}`}>\n                      ✤ Instagram\n                    </a>\n                  )}\n                  {social.github && (\n                    <a href={`https://github.com/${social.github}`}>✤ GitHub</a>\n                  )}\n                  {social.medium && (\n                    <a href={`https://medium.com/${social.medium}`}>✤ Medium</a>\n                  )}\n                  {social.twitter && (\n                    <a href={`https://twitter.com/${social.twitter}`}>\n                      ✤ Twitter\n                    </a>\n                  )}\n                  {social.facebook && (\n                    <a href={`https://www.facebook.com/${social.facebook}`}>\n                      ✤ Facebook\n                    </a>\n                  )}\n                  {social.linkedin && (\n                    <a href={`https://www.linkedin.com/in/${social.linkedin}/`}>\n                      ✤ LinkedIn\n                    </a>\n                  )}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }}\n  />\n})\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile.png/\" }) {\n      childImageSharp {\n        fixed(width: 72, height: 72) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        introduction\n        social {\n          twitter\n          github\n          medium\n          facebook\n          linkedin\n          instagram\n        }\n      }\n    }\n  }\n`\n\nexport default Bio\n"],"sourceRoot":""}