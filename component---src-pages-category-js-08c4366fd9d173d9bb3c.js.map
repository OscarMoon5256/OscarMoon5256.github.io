{"version":3,"sources":["webpack:///./src/pages/category.js"],"names":["data","location","siteMetadata","site","countOfInitialPost","configs","posts","allMarkdownRemark","edges","categories","useMemo","map","node","frontmatter","category","useRenderedCount","count","countRef","increaseCount","useCategory","selectCategory","useIntersectionObserver","useScrollEvent","currentPos","window","scrollY","innerHeight","isTriggerPos","Dom","getDistance","EventManager","dismissCondition","triggerCondition","length","current","title","BLOG_TITLE","keywords","style","marginLeft","marginRight","maxWidth","rhythm","padding"],"mappings":"iSAsBe,sBAAyB,IAAtBA,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SACdC,EAAiBF,EAAKG,KAAtBD,aACAE,EAAuBF,EAAaG,QAApCD,mBACFE,EAAQN,EAAKO,kBAAkBC,MAC/BC,EAAaC,mBACjB,kBAAM,IAAOJ,EAAMK,KAAI,YAAO,SAAJC,KAAgBC,YAAYC,eACtD,IAGF,EAAyCC,cAAlCC,EAAK,KAAEC,EAAQ,KAAEC,EAAa,KACrC,EAAmCC,cAA5BL,EAAQ,KAAEM,EAAc,KAgB/B,OAdAC,cAEAC,aAAe,WACb,IAAMC,EAAaC,OAAOC,QAAUD,OAAOE,YACrCC,EAAe,WAAH,OApBtB,SAAqBJ,GACnB,OAAOK,MAA0BL,EAmBJM,CAAYN,GAtBzB,IA0Bd,OAAOO,IAAmBZ,EAAe,CACvCa,iBAAkB,kBAAOJ,KACzBK,iBAAkB,kBAAML,KAJxBrB,EAAM2B,OAAShB,EAASiB,QAAU9B,IAE7B0B,MAOP,kBAAC,IAAM,CAAC7B,SAAUA,EAAUkC,MAAOjC,EAAaiC,OAC9C,kBAAC,IAAG,CAACA,MAAOC,IAAYC,SAAUnC,EAAamC,WAC/C,kBAAC,IAAQ,CACP5B,WAAYA,EACZK,SAAUA,EACVM,eAAgBA,IAElB,yBACEkB,MAAO,CACLC,WAAW,OACXC,YAAY,OACZC,SAAUC,YAAO,IACjBC,QAAYD,YAAO,KAAI,IAAIA,YAAO,EAAI,GAAE,IAAIA,YAAO,GAAE,IAAIA,YACvD,EAAI,KAIR,kBAAC,IAAQ,CACPpC,MAAOA,EACPF,mBAAoBA,EACpBY,MAAOA,EACPF,SAAUA","file":"component---src-pages-category-js-08c4366fd9d173d9bb3c.js","sourcesContent":["import { graphql } from 'gatsby'\nimport _ from 'lodash'\nimport React, { useMemo } from 'react'\nimport { SEO } from '../components/seo'\nimport { Category } from '../components/category'\nimport { Contents } from '../components/contents'\nimport { BLOG_TITLE } from '../constants/meta'\nimport { useCategory } from '../hooks/useCategory'\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver'\nimport { useRenderedCount } from '../hooks/useRenderedCount'\nimport { useScrollEvent } from '../hooks/useScrollEvent'\nimport { Layout } from '../layout'\nimport { rhythm } from '../utils/typography'\nimport * as Dom from '../utils/dom'\nimport * as EventManager from '../utils/event-manager'\n\nconst BASE_LINE = 80\n\nfunction getDistance(currentPos) {\n  return Dom.getDocumentHeight() - currentPos\n}\n\nexport default ({ data, location }) => {\n  const { siteMetadata } = data.site\n  const { countOfInitialPost } = siteMetadata.configs\n  const posts = data.allMarkdownRemark.edges\n  const categories = useMemo(\n    () => _.uniq(posts.map(({ node }) => node.frontmatter.category)),\n    []\n  )\n\n  const [count, countRef, increaseCount] = useRenderedCount()\n  const [category, selectCategory] = useCategory()\n\n  useIntersectionObserver()\n\n  useScrollEvent(() => {\n    const currentPos = window.scrollY + window.innerHeight\n    const isTriggerPos = () => getDistance(currentPos) < BASE_LINE\n    const doesNeedMore = () =>\n      posts.length > countRef.current * countOfInitialPost\n\n    return EventManager.toFit(increaseCount, {\n      dismissCondition: () => !isTriggerPos(),\n      triggerCondition: () => isTriggerPos() && doesNeedMore(),\n    })()\n  })\n\n  return (\n    <Layout location={location} title={siteMetadata.title}>\n      <SEO title={BLOG_TITLE} keywords={siteMetadata.keywords} />\n      <Category\n        categories={categories}\n        category={category}\n        selectCategory={selectCategory}\n      />\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)} ${rhythm(1)} ${rhythm(\n            3 / 4\n          )}`,\n        }}\n      >\n        <Contents\n          posts={posts}\n          countOfInitialPost={countOfInitialPost}\n          count={count}\n          category={category}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { ne: null }, draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            category\n            draft\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}